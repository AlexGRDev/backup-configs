# ========================
#  Historial / edici√≥n
# ========================
setopt histignorealldups sharehistory inc_append_history
bindkey -e
HISTSIZE=1000
SAVEHIST=1000
HISTFILE=~/.zsh_history

# ========================
#  Homebrew
# ========================
if [ -x /opt/homebrew/bin/brew ]; then
  eval "$(/opt/homebrew/bin/brew shellenv)"
fi

# ========================
#  PATH din√°mico
# ========================
if [[ "$(hostname)" == *"student"* || "$(whoami)" == "agarcia2" ]]; then
  export PATH="$HOME/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"
else
  export PATH="/opt/homebrew/bin:/opt/homebrew/sbin:$HOME/.local/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin"
fi

# ========================
#  Completion System
# ========================
autoload -Uz compinit
ZSH_COMPDUMP=${ZSH_COMPDUMP:-$HOME/.zcompdump}
if [[ ! -f $ZSH_COMPDUMP || ! -s $ZSH_COMPDUMP ]]; then
  compinit
else
  compinit -C
fi

zstyle ':completion:*' auto-description 'specify: %d'
zstyle ':completion:*' completer _expand _complete _correct _approximate
zstyle ':completion:*' format 'Completing %d'
zstyle ':completion:*' menu select=long
zstyle ':completion:*' matcher-list '' 'm:{a-z}={A-Z}' 'r:|[._-]=* r:|=* l:|=*'
zstyle ':completion:*:default' list-colors ${(s.:.)LS_COLORS}
zstyle ':completion:*' verbose true
zstyle ':completion:*:*:kill:*:processes' list-colors '=(#b) #([0-9]#)*=0=01;31'

# ========================
#  Powerlevel10k + Banner
# ========================
load_p10k() {
  local THEME_DIR="${ZSH_CUSTOM:-$HOME/.oh-my-zsh/custom}/themes/powerlevel10k"
  local THEME_FILE="$THEME_DIR/powerlevel10k.zsh-theme"
  local CONF_HOME="$HOME/.p10k.zsh"
  local CONF_THEME="$THEME_DIR/.p10k.zsh"
  [[ -r "$THEME_FILE" ]] && source "$THEME_FILE"
  if [[ -r "$CONF_HOME" ]]; then
    source "$CONF_HOME"
  elif [[ -r "$CONF_THEME" ]]; then
    source "$CONF_THEME"
  fi
  if typeset -f p10k >/dev/null; then
    p10k reload 2>/dev/null || true
  fi
}

show_banner() {
  # Preferimos Kitty, pero si no, tambi√©n vale en otros t√©rminos
  if command -v fastfetch >/dev/null 2>&1; then
    fastfetch
  elif command -v neofetch >/dev/null 2>&1; then
    neofetch
  fi
}

# Hook para mostrar banner UNA sola vez al abrir Kitty
typeset -gi __ITS_BANNER_SHOWN=0
its_banner_precmd() {
  # Solo en sesi√≥n interactiva y s√≥lo una vez
  if [[ $__ITS_BANNER_SHOWN -eq 0 && -o interactive ]]; then
    # Damos un pel√≠n de tiempo a Kitty para exportar vars
    if [[ -n "$KITTY_WINDOW_ID" || "$TERM" == "xterm-kitty" ]]; then
      sleep 0.05
      show_banner
      __ITS_BANNER_SHOWN=1
    fi
  fi
}
precmd_functions+=its_banner_precmd

# ========================
#  Oh My Zsh
# ========================
if [[ -d ${ZSH:-$HOME/.oh-my-zsh} ]]; then
  export ZSH=${ZSH:-$HOME/.oh-my-zsh}
  if [[ -r ${ZSH_CUSTOM:-$ZSH/custom}/themes/powerlevel10k/powerlevel10k.zsh-theme ]]; then
    ZSH_THEME="powerlevel10k/powerlevel10k"
  else
    ZSH_THEME="robbyrussell"
  fi
  plugins=(git z web-search)
  source "$ZSH/oh-my-zsh.sh"
  load_p10k
fi

# ========================
#  Variables campus
# ========================
if [[ "$(hostname)" == *"student"* ]]; then
  export MAIL='agarcia2@student.42barcelona.com'
fi

# ========================
#  Aliases √∫tiles
# ========================
alias ll='ls -Alh'
alias la='ls -A'
alias l='ls -1'
alias grep='grep --color=auto'
alias gs='git status -sb'
alias ga='git add -A'
alias gc='git commit -m'
alias gco='git checkout'
alias gb='git branch'
alias gd='git diff'
alias gl='git log --oneline --graph --decorate --all'
alias gp='git push'
alias gpl='git pull'
alias compile='/usr/bin/gcc'
alias mini='~/mini-moulinette/mini-moul.sh'
alias norma='norminette'

# ========================
#  cat mejorado
# ========================
cat() {
  if [[ $# -eq 0 ]]; then
    command cat
    return
  fi
  for f in "$@"; do
    if [[ ! -f "$f" ]]; then
      echo "‚ùå Archivo no encontrado: $f"
      continue
    fi
    local lines
    lines=$(wc -l < "$f" | tr -d ' ')
    echo -e "\nüìÑ Archivo: \033[1;36m$f\033[0m ‚Äî \033[1;33m${lines} l√≠neas\033[0m\n"
    if command -v bat >/dev/null 2>&1 && file -b --mime-type "$f" | grep -q '^text/'; then
      bat --style=full --pager=never "$f"
    else
      command cat "$f"
    fi
    echo
  done
}

# ========================
#  Sistema de backups
# ========================
BACKUP_DIR="/usr/local/backup"
# Crea √°rbol y repara permisos si hace falta (solo primera vez)
if [[ ! -d "$BACKUP_DIR" ]]; then
  sudo mkdir -p "$BACKUP_DIR"/{zsh,vim,kitty}
  sudo chown -R "$USER":staff "$BACKUP_DIR"
fi

backup_configs() {
  local ts
  ts=$(date +"%Y-%m-%d_%H-%M-%S")
  # Si no tenemos permiso (por si acaso), intentamos corregir y seguir
  if [[ ! -w "$BACKUP_DIR" ]]; then
    sudo chown -R "$USER":staff "$BACKUP_DIR" 2>/dev/null
  fi
  cp -f ~/.zshrc "$BACKUP_DIR/zsh/zshrc_$ts" 2>/dev/null
  [[ -f ~/.vimrc ]] && cp -f ~/.vimrc "$BACKUP_DIR/vim/vimrc_$ts" 2>/dev/null
  [[ -f ~/.config/kitty/kitty.conf ]] && cp -f ~/.config/kitty/kitty.conf "$BACKUP_DIR/kitty/kitty_$ts.conf" 2>/dev/null
  echo "üóÑ  Backup ‚Üí $BACKUP_DIR ($ts)"
}

recarga() {
  echo "üîÑ Guardando backup y recargando configuraci√≥n..."
  backup_configs
  export ZSHRC_RELOADING=1
  source ~/.zshrc
  unset ZSHRC_RELOADING
  load_p10k
  show_banner
  __ITS_BANNER_SHOWN=1   # evita banner doble tras la recarga
  echo "‚úÖ Listo."
}

# ========================
#  Prompt fallback
# ========================
if ! typeset -f p10k >/dev/null; then
  autoload -Uz promptinit
  promptinit
  prompt adam1
fi

# ========================
#  Extras
# ========================
[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh
export PATH="$HOME/.local/bin:$PATH"
